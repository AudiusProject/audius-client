# This file contains the fastlane.tools configuration
# You can find the documentation at https://docs.fastlane.tools
#
# For a list of all available actions, check out
#
#     https://docs.fastlane.tools/actions
#
# For a list of all available plugins, check out
#
#     https://docs.fastlane.tools/plugins/available-plugins
#

# Uncomment the line if you want fastlane to automatically update itself
# update_fastlane

default_platform(:ios)

AUDIUSMUSIC_ID = "co.audius.audiusmusic"
AUDIUSMUSIC_RELEASECANDIDATE_ID = "co.audius.audiusmusic.releasecandidate"
AUDIUSMUSIC_STAGING_ID = "co.audius.audiusmusic.staging"
AUDIUSMUSIC_STAGING_RELEASECANDIDATE_ID = "co.audius.audiusmusic.staging.releasecandidate"
AUDIUSMUSIC_PROFILE = "match AppStore co.audius.audiusmusic"
AUDIUSMUSIC_RELEASECANDIDATE_PROFILE = "match AppStore co.audius.audiusmusic.releasecandidate"
AUDIUSMUSIC_STAGING_PROFILE = "match AppStore co.audius.audiusmusic.staging"
AUDIUSMUSIC_STAGING_RELEASECANDIDATE_PROFILE = "match AppStore co.audius.audiusmusic.staging.releasecandidate"
TEAM = "LRFCG93S85"
CODEPUSH_APP_NAME = 'Audius-Music/Audius'
CODEPUSH_STAGING_DEPLOYMENT = 'Staging'
CODEPUSH_RC_DEPLOYMENT = 'ReleaseCandidate'
CODEPUSH_PROD_DEPLOYMENT = 'Production'

platform :ios do
  before_all do
    setup_circle_ci
  end

  desc "Get current release version and version in plist file"
  private_lane :get_version do |options|

    currentReleasedVersionString = get_app_store_version_number(
      bundle_id: 'co.audius.audiusmusic'
    )

    currentReleasedVersionNumber = Gem::Version.new currentReleasedVersionString
    plistVersionNumber = Gem::Version.new get_version_number_from_plist(
      scheme: options[:scheme]
    )
    [currentReleasedVersionNumber, plistVersionNumber]
  end

  desc "Build the app"
  lane :build do |options|

    if options[:bundle_id] === AUDIUSMUSIC_ID
      appId = AUDIUSMUSIC_ID
      provisioningProfile = AUDIUSMUSIC_PROFILE
      environment = 'production'
      scheme = 'AudiusReactNative'
      configuration = 'Release'
    elsif options[:bundle_id] === AUDIUSMUSIC_STAGING_ID
      appId = AUDIUSMUSIC_STAGING_ID
      provisioningProfile = AUDIUSMUSIC_STAGING_PROFILE
      environment = 'staging'
      scheme = 'Staging'
      configuration = 'Staging.Release'
    elsif options[:bundle_id] === AUDIUSMUSIC_RELEASECANDIDATE_ID
      appId = AUDIUSMUSIC_RELEASECANDIDATE_ID
      provisioningProfile = AUDIUSMUSIC_RELEASECANDIDATE_PROFILE
      environment = 'production'
      scheme = 'AudiusReactNative'
      configuration = 'ReleaseCandidate'
    elsif options[:bundle_id] === AUDIUSMUSIC_STAGING_RELEASECANDIDATE_ID
      appId = AUDIUSMUSIC_STAGING_RELEASECANDIDATE_ID
      provisioningProfile = AUDIUSMUSIC_STAGING_RELEASECANDIDATE_PROFILE
      environment = 'staging'
      scheme = 'Staging'
      configuration = 'Staging.ReleaseCandidate'
    end

    match(
      type: "appstore",
      readonly: is_ci,
      app_identifier: options[:bundle_id]
    )

    settings_to_override = {
      :BUNDLE_IDENTIFIER => appId,
      :PROVISIONING_PROFILE_SPECIFIER => provisioningProfile,
      :DEVELOPMENT_TEAM => TEAM
    }

    if ENV["IS_PRODUCTION"] == "true"
      ENV["ENVFILE"]=".env.#{environment}"
      puts "IS_PRODUCTION: #{ENV['IS_PRODUCTION']}"
      puts "ENVFILE: #{ENV['ENVFILE']}"
    end

    # Version number (e.g. 1.0.100) will be incremented by a patch version
    # from the currently live version in the app store. If a higher version number
    # is specified in Info.plist, that one will be used

    currentReleasedVersionNumberString = options[:current_released_version] ? (options[:current_released_version].to_s) : (get_app_store_version_number(
      bundle_id: 'co.audius.audiusmusic'
    ))

    currentReleasedVersionNumber = options[:current_released_version] ? (options[:current_released_version]) : (Gem::Version.new currentReleasedVersionNumberString)

    plistVersionNumber = options[:plist_version] ? (options[:plist_version]) : (Gem::Version.new get_version_number_from_plist(
      scheme: scheme
    ))

    # If the version specified in project is greater than
    # the previous version number, there is no need to modify version number in the project
    if plistVersionNumber <= currentReleasedVersionNumber
      # Increment the patch version
      # This is necessary because the same version number cannot be used twice on the app store
      patchRegex = /\d+.\d+.(\d+)/
      previousPatch = currentReleasedVersionNumberString[patchRegex, 1]
      currentReleasedVersionNumberString[patchRegex, 1] = (previousPatch.to_i + 1).to_s
      plistVersionNumber = currentReleasedVersionNumberString

      increment_version_number_in_plist(
        version_number: plistVersionNumber,
        scheme: scheme
      )

      increment_version_number_in_xcodeproj(
        version_number: plistVersionNumber,
        scheme: scheme
      )
    end

    # Increment build

    # Build number (e.g. 12) needs to be unique for the given version number
    # Increment using the updated version number so that for each version number
    # build numbers start at 1

    app_store_connect_api_key
    increment_build_number(
      build_number: app_store_build_number(
        app_identifier: options[:bundle_id],
        initial_build_number: 0,
        version: plistVersionNumber.to_s,
        live: false
      ) + 1,
    )

    # Build ios
    gym(
      workspace: "AudiusReactNative.xcworkspace",
      codesigning_identity: "iPhone Distribution",
      scheme: scheme,
      configuration: configuration,
      xcargs: settings_to_override,
      export_method: "app-store",
      export_options: {
          provisioningProfiles: {
              appId => provisioningProfile
          }
      }
    )
  end

  desc "Push a build to TestFlight"
  lane :upload do |options|

    if (options[:bundle_id] === 'co.audius.audiusmusic') 
      appleId = "1491270519"
      ipa = './output/gym/Audius Music.ipa'
    elsif (options[:bundle_id] === 'co.audius.audiusmusic.staging')
      appleId = "6444191594"
      ipa = './output/gym/Audius Music Staging.ipa'
    elsif (options[:bundle_id] === 'co.audius.audiusmusic.releasecandidate')
      appleId = "6444068448"
      ipa = './output/gym/Audius Music Release Candidate.ipa'
    elsif (options[:bundle_id] === 'co.audius.audiusmusic.staging.releasecandidate')
      appleId = "6444190971"
      ipa = './output/gym/Audius Music Release Candidate Staging.ipa'
    end
   
    # Upload to test flight
    pilot(
      skip_waiting_for_build_processing: true,
      apple_id: appleId,
      app_identifier: options[:bundle_id],
      ipa: ipa,
      # Don't actually distribute, just upload
      skip_submission: true
    )
  end

  desc "Build + upload via CodePush or TestFlight"
  lane:build_and_upload do |options|
    if options[:bundle_id] === AUDIUSMUSIC_ID
      scheme = 'AudiusReactNative'
      codepushDeployment = CODEPUSH_PROD_DEPLOYMENT
    elsif options[:bundle_id] === AUDIUSMUSIC_STAGING_ID
      scheme = 'Staging'
      codepushDeployment = CODEPUSH_STAGING_DEPLOYMENT
    elsif options[:bundle_id] === AUDIUSMUSIC_RELEASECANDIDATE_ID
      scheme = 'AudiusReactNative'
      codepushDeployment = CODEPUSH_RC_DEPLOYMENT
    elsif options[:bundle_id] === AUDIUSMUSIC_STAGING_RELEASECANDIDATE_ID
      scheme = 'Staging'
      codepushDeployment = CODEPUSH_RC_DEPLOYMENT
    end
    currentReleasedVersionNumber, plistVersionNumber = get_version(scheme: scheme)
    isVersionIncremented = plistVersionNumber > currentReleasedVersionNumber
    if !isVersionIncremented
      # Codepush to the right environment
      sh("appcenter login --token #{ENV['APPCENTER_CODEPUSH_API_KEY']}")
      sh("appcenter codepush release #{CODEPUSH_APP_NAME} ./ios/main.jsbundle #{currentReleasedVersionNumber.to_s} --deploymentName #{codepushDeployment} --noDuplicateReleaseError")
      sh("appcenter logout")
    else
        # Build and upload to TestFlight
        build(bundle_id: options[:bundle_id], current_released_version: currentReleasedVersionNumber, plist_version: plistVersionNumber)
        upload(bundle_id: options[:bundle_id])
    end
  end

end
