diff --git a/node_modules/react-native-screens/ios/RNSScreenStack.mm b/node_modules/react-native-screens/ios/RNSScreenStack.mm
index 1d456bf..0c246e5 100644
--- a/node_modules/react-native-screens/ios/RNSScreenStack.mm
+++ b/node_modules/react-native-screens/ios/RNSScreenStack.mm
@@ -607,9 +607,15 @@ - (BOOL)gestureRecognizerShouldBegin:(UIGestureRecognizer *)gestureRecognizer
   // RNSPanGestureRecognizer will receive events iff topScreen.fullScreenSwipeEnabled == YES;
   // Events are filtered in gestureRecognizer:shouldReceivePressOrTouchEvent: method
   if ([gestureRecognizer isKindOfClass:[RNSPanGestureRecognizer class]]) {
+    RNSPanGestureRecognizer *panRecognizer = gestureRecognizer;
     if ([self isInGestureResponseDistance:gestureRecognizer topScreen:topScreen]) {
       _isFullWidthSwiping = YES;
       [self cancelTouchesInParent];
+      CGPoint translation = [panRecognizer translationInView:_controller.view];
+      // Ignore swiping "forward" (RTL)
+      if (translation.x < 0) {
+        return NO;
+      }
       return YES;
     }
     return NO;
@@ -663,7 +669,7 @@ - (void)setupGestureHandlers
   RNSPanGestureRecognizer *panRecognizer = [[RNSPanGestureRecognizer alloc] initWithTarget:self
                                                                                     action:@selector(handleSwipe:)];
   panRecognizer.delegate = self;
-  [self addGestureRecognizer:panRecognizer];
+  [_controller.view addGestureRecognizer:panRecognizer];
 }
 
 - (void)handleSwipe:(UIPanGestureRecognizer *)gestureRecognizer
