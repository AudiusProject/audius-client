import { isEqual } from 'lodash'

import { Collection } from 'models/Collection'
import { SquareSizes } from 'models/ImageSizes'
import { Track } from 'models/Track'
import { AudiusBackend } from 'services/audius-backend'

import { Nullable } from './typeUtils'

type ArtworkActions = {
  added?: Track
  removed?: Track
  reordered?: Track[]
  regenerate?: boolean
}

type Context = {
  audiusBackend: AudiusBackend
  generateImage: (urls: string[]) => Promise<{ url: string; file: File }>
}

export const updatePlaylistArtwork = async (
  collection: Collection,
  tracks: Track[],
  actions: ArtworkActions,
  context: Context
) => {
  const { is_image_autogenerated } = collection
  if (!is_image_autogenerated && !actions.regenerate) {
    return collection
  }

  let tracksForImage: Nullable<Track[]> = null

  if (actions.added) {
    if (tracks.length === 0) {
      tracksForImage = [actions.added]
    } else if (tracks.length === 3) {
      tracksForImage = [...tracks, actions.added]
    }
  } else if (actions.removed) {
    const { removed } = actions
    const removedIndex = tracks.findIndex(
      (track) => track.track_id === removed.track_id
    )
    if (removedIndex === -1) {
      // continue
    } else if (tracks.length >= 4 && removedIndex < 4) {
      tracksForImage = [...tracks].splice(removedIndex, 1).slice(0, 4)
    } else if (tracks.length === 4) {
      tracksForImage = tracks.splice(removedIndex, 1).slice(0, 1)
    } else if (tracks.length < 4 && removedIndex === 0) {
      tracksForImage = tracks.slice(1, 1)
    }
  } else if (actions.reordered) {
    if (
      tracks.length >= 4 &&
      !isEqual(actions.reordered.slice(0, 4), tracks.slice(0, 4))
    ) {
      tracksForImage = actions.reordered.slice(0, 4)
    } else if (tracks.length < 4 && !isEqual(actions.reordered[0], tracks[0])) {
      tracksForImage = [actions.reordered[0]]
    }
  } else if (actions.regenerate) {
    tracksForImage = tracks.slice(0, 4)
  }

  if (tracksForImage) {
    const tracks =
      tracksForImage.length < 4 ? tracksForImage.slice(0, 1) : tracksForImage

    const trackUrls = await Promise.all(
      tracks.map(async (track) => {
        const { cover_art_sizes, cover_art } = track
        return await context.audiusBackend.getImageUrl(
          cover_art_sizes ?? cover_art,
          SquareSizes.SIZE_1000_BY_1000
        )
      })
    )

    const artwork = await context.generateImage(trackUrls)
    const { url } = artwork
    collection.artwork = artwork
    collection.cover_art_sizes = url
    const coverArtSizes = collection._cover_art_sizes ?? {}
    coverArtSizes.OVERRIDE = url
    collection._cover_art_sizes = coverArtSizes
    collection.is_image_autogenerated = true
  }

  return collection
}
