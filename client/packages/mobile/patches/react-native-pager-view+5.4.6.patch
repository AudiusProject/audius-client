diff --git a/node_modules/react-native-pager-view/ios/ReactNativePageView.h b/node_modules/react-native-pager-view/ios/ReactNativePageView.h
index f7f31a5..c6a0356 100644
--- a/node_modules/react-native-pager-view/ios/ReactNativePageView.h
+++ b/node_modules/react-native-pager-view/ios/ReactNativePageView.h
@@ -23,7 +23,7 @@ NS_ASSUME_NONNULL_BEGIN
 @property(nonatomic, copy) RCTDirectEventBlock onPageScrollStateChanged;
 @property(nonatomic) BOOL overdrag;
 @property(nonatomic) NSString* layoutDirection;
-
+@property(nonatomic) NSUInteger previousNavigationStackCount;
 
 - (void)goTo:(NSInteger)index animated:(BOOL)animated;
 - (void)shouldScroll:(BOOL)scrollEnabled;
diff --git a/node_modules/react-native-pager-view/ios/ReactNativePageView.m b/node_modules/react-native-pager-view/ios/ReactNativePageView.m
index 78f266b..6ec966d 100644
--- a/node_modules/react-native-pager-view/ios/ReactNativePageView.m
+++ b/node_modules/react-native-pager-view/ios/ReactNativePageView.m
@@ -3,6 +3,7 @@
 #import "React/RCTLog.h"
 #import <React/RCTViewManager.h>
 
+#import "RNGestureHandler.h"
 #import "UIViewController+CreateExtension.h"
 #import "RCTOnPageScrollEvent.h"
 #import "RCTOnPageScrollStateChanged.h"
@@ -47,6 +48,7 @@ - (instancetype)initWithEventDispatcher:(RCTEventDispatcher *)eventDispatcher {
         _cachedControllers = [NSHashTable weakObjectsHashTable];
         _overdrag = NO;
         _layoutDirection = @"ltr";
+        _previousNavigationStackCount = 1;
     }
     return self;
 }
@@ -83,6 +85,62 @@ - (void)didMoveToWindow {
         [self embed];
         [self setupInitialController];
     }
+    if (self.reactViewController.navigationController != nil) {
+        NSUInteger count = [self.reactViewController.navigationController.viewControllers count];
+
+        if (count >= _previousNavigationStackCount) {
+            // We are pushing to the stack, always enable the stack navigator
+            for (UIGestureRecognizer *recognizer in self.reactViewController.navigationController.view.gestureRecognizers) {
+                recognizer.enabled = YES;
+            }
+        } else {
+            // We are popping from the stack, only enable stack if we're on the first tab
+            if (self.currentIndex == 0) {
+                for (UIGestureRecognizer *recognizer in self.reactViewController.navigationController.view.gestureRecognizers) {
+                    recognizer.enabled = YES;
+                }
+            } else {
+                for (UIGestureRecognizer *recognizer in self.reactViewController.navigationController.view.gestureRecognizers) {
+                    // Do not disable the gesture immediately as the window is popping.
+                    NSTimeInterval delayInSeconds = 0.5;
+                    dispatch_time_t popTime = dispatch_time(DISPATCH_TIME_NOW, (int64_t)(delayInSeconds * NSEC_PER_SEC));
+                        dispatch_after(popTime, dispatch_get_main_queue(), ^(void){
+                        recognizer.enabled = NO;
+                    });
+                }
+            }
+        }
+
+        if (self.currentIndex == 0) {
+            // On the first tab, we want to listen to the drawer's gestures, so
+            // swiping it open works.
+            NSHashTable<RNGestureHandler *> *handlers = [RNGestureHandler getGestureHandlers];
+            NSEnumerator *enumerator = [handlers objectEnumerator];
+            RNGestureHandler* handler;
+            while ((handler = [enumerator nextObject])) {
+                handler.recognizer.enabled = YES;
+                handler.frozen = NO;
+                [self.scrollView.panGestureRecognizer requireGestureRecognizerToFail:handler.recognizer];
+            }
+        } else {
+            // On the other tabs tab, we should disable the drawer's gestures.
+            NSHashTable<RNGestureHandler *> *handlers = [RNGestureHandler getGestureHandlers];
+            NSEnumerator *enumerator = [handlers objectEnumerator];
+            RNGestureHandler* handler;
+            while ((handler = [enumerator nextObject])) {
+                handler.recognizer.enabled = NO;
+                handler.frozen = YES;
+            }
+        }
+
+      _previousNavigationStackCount = count;
+    }
+
+    // Disable tab swipes when the stack navigator receives a "pop" gesture
+    if (self.reactViewController.navigationController != nil && self.reactViewController.navigationController.interactivePopGestureRecognizer != nil) {
+        [self.scrollView.panGestureRecognizer requireGestureRecognizerToFail:self.reactViewController.navigationController.interactivePopGestureRecognizer];
+    }
+
 }
 
 - (void)embed {
@@ -191,6 +249,42 @@ - (void)setReactViewControllers:(NSInteger)index
                 strongSelf.lastReportedIndex = strongSelf.currentIndex;
             }
         }
+
+        if (self.reactViewController.navigationController != nil) {
+            if (strongSelf.currentIndex == 0) {
+                // On the first tab, we want to listen to the navigation's gestures, so
+                // swipe back works.
+                for (UIGestureRecognizer *recognizer in self.reactViewController.navigationController.view.gestureRecognizers) {
+                    recognizer.enabled = YES;
+                    [self.scrollView.panGestureRecognizer requireGestureRecognizerToFail:recognizer];
+                }
+
+                // On the first tab, we want to listen to the drawer's gestures, so
+                // swiping it open works.
+                NSHashTable<RNGestureHandler *> *handlers = [RNGestureHandler getGestureHandlers];
+                NSEnumerator *enumerator = [handlers objectEnumerator];
+                RNGestureHandler* handler;
+                while ((handler = [enumerator nextObject])) {
+                    handler.recognizer.enabled = YES;
+                    handler.frozen = NO;
+                    [self.scrollView.panGestureRecognizer requireGestureRecognizerToFail:handler.recognizer];
+                }
+            } else {
+                // On other tabs, we should disable the navigations's gestures
+                for (UIGestureRecognizer *recognizer in self.reactViewController.navigationController.view.gestureRecognizers) {
+                    recognizer.enabled = NO;
+                }
+
+                // On the other tabs tab, we should disable the drawer's gestures.
+                NSHashTable<RNGestureHandler *> *handlers = [RNGestureHandler getGestureHandlers];
+                NSEnumerator *enumerator = [handlers objectEnumerator];
+                RNGestureHandler* handler;
+                while ((handler = [enumerator nextObject])) {
+                    handler.recognizer.enabled = NO;
+                    handler.frozen = YES;
+                }
+            }
+        }
     }];
 }
 
@@ -322,7 +416,6 @@ - (void)pageViewController:(UIPageViewController *)pageViewController
         didFinishAnimating:(BOOL)finished
    previousViewControllers:(nonnull NSArray<UIViewController *> *)previousViewControllers
        transitionCompleted:(BOOL)completed {
-    
     if (completed) {
         UIViewController* currentVC = [self currentlyDisplayed];
         NSUInteger currentIndex = [self.reactSubviews indexOfObject:currentVC.view];
@@ -333,6 +426,42 @@ - (void)pageViewController:(UIPageViewController *)pageViewController
         [self.eventDispatcher sendEvent:[[RCTOnPageSelected alloc] initWithReactTag:self.reactTag position:@(currentIndex) coalescingKey:_coalescingKey++]];
         [self.eventDispatcher sendEvent:[[RCTOnPageScrollEvent alloc] initWithReactTag:self.reactTag position:@(currentIndex) offset:@(0.0)]];
         self.lastReportedIndex = currentIndex;
+
+        if (self.reactViewController.navigationController != nil) {
+            if (self.currentIndex == 0) {
+                // On the first tab, we want to listen to the navigation's gestures, so
+                // swipe back works.
+                for (UIGestureRecognizer *recognizer in self.reactViewController.navigationController.view.gestureRecognizers) {
+                    recognizer.enabled = YES;
+                    [self.scrollView.panGestureRecognizer requireGestureRecognizerToFail:recognizer];
+                }
+
+                // On the first tab, we want to listen to the drawer's gestures, so
+                // swiping it open works.
+                NSHashTable<RNGestureHandler *> *handlers = [RNGestureHandler getGestureHandlers];
+                NSEnumerator *enumerator = [handlers objectEnumerator];
+                RNGestureHandler* handler;
+                while ((handler = [enumerator nextObject])) {
+                    handler.recognizer.enabled = YES;
+                    handler.frozen = NO;
+                    [self.scrollView.panGestureRecognizer requireGestureRecognizerToFail:handler.recognizer];
+                }
+            } else {
+                // On other tabs, we should disable the navigations's gestures
+                for (UIGestureRecognizer *recognizer in self.reactViewController.navigationController.view.gestureRecognizers) {
+                    recognizer.enabled = NO;
+                }
+
+                // On the other tabs tab, we should disable the drawer's gestures.
+                NSHashTable<RNGestureHandler *> *handlers = [RNGestureHandler getGestureHandlers];
+                NSEnumerator *enumerator = [handlers objectEnumerator];
+                RNGestureHandler* handler;
+                while ((handler = [enumerator nextObject])) {
+                    handler.recognizer.enabled = NO;
+                    handler.frozen = YES;
+                }
+            }
+        }
     }
 }
 
