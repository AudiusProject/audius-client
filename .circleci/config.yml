version: 2.1

commands:
  create_concatenated_package_lock:
    description: "Concatenate all package-lock.json files recognized by lerna.js into single file. File is used as checksum source for part of caching key."
    parameters:
      filename:
        type: string
    steps:
      - run:
          name: Combine package-lock.json files to single file
          command: ls -d -- packages/*/*-lock.json | awk -F packages '{printf "\"packages%s\" ", $2}' | xargs cat > << parameters.filename >>
  slack-basic:
    parameters:
      event:
        description: when this notification will fire. options are fail, pass, always.
        type: string
        default: always
      branch_pattern:
        description: branch_pattern arg for slack/notify
        type: string
        default: .+
      channel:
        description: Slack channel to send message to
        type: string
        default: $SLACK_DEFAULT_CHANNEL
      text:
        description: Markdown formatted Slack message
        type: string
        default: "Job started. :crossed_fingers:"
      slack_mentions_user:
        description: Used for CircleCI @mentions
        type: string
        default: ""
    steps:
      - slack/notify:
          channel: << parameters.channel >>
          branch_pattern: << parameters.branch_pattern >>
          custom: |
            {
              "blocks": [
                {
                  "type": "header",
                  "text": {
                    "type": "plain_text",
                    "text": "<< parameters.text >>",
                    "emoji": true
                  }
                },
                {
                  "type": "section",
                  "fields": [
                    {
                      "type": "mrkdwn",
                      "text": "*Job*: ${CIRCLE_JOB}"
                    }
                  ]
                },
                {
                  "type": "section",
                  "fields": [
                    {
                      "type": "mrkdwn",
                      "text": "*Project*: $CIRCLE_PROJECT_REPONAME"
                    },
                    {
                      "type": "mrkdwn",
                      "text": "*Branch*: $CIRCLE_BRANCH"
                    },
                    {
                      "type": "mrkdwn",
                      "text": "*Author*: $CIRCLE_USERNAME"
                    },
                    {
                      "type": "mrkdwn",
                      "text": "*Mentions*: << parameters.slack_mentions_user >>"
                    }
                  ]
                },
                {
                  "type": "actions",
                  "elements": [
                    {
                      "type": "button",
                      "text": {
                        "type": "plain_text",
                        "text": "View Job"
                      },
                      "url": "${CIRCLE_BUILD_URL}"
                    }
                  ]
                }
              ]
            }
          event: << parameters.event >>
  slack-fail:
    parameters:
      event:
        description: when this notification will fire. options are fail, pass, always.
        type: string
        default: fail
      branch_pattern:
        description: branch_pattern arg for slack/notify
        type: string
        default: .+
      channel:
        description: Slack channel to send message to
        type: string
        default: $SLACK_DEFAULT_CHANNEL
      text:
        description: Markdown formatted Slack message
        type: string
        default: "Job Failed. :red_circle:"
      slack_mentions_user:
        description: Used for CircleCI @mentions
        type: string
        default: ""
    steps:
      - slack-basic:
          event: << parameters.event >>
          branch_pattern: << parameters.branch_pattern >>
          channel: << parameters.channel >>
          text: << parameters.text >>
          slack_mentions_user: << parameters.slack_mentions_user >>
  slack-success:
    parameters:
      event:
        description: when this notification will fire. options are fail, pass, always.
        type: string
        default: pass
      branch_pattern:
        description: branch_pattern arg for slack/notify
        type: string
        default: .+
      channel:
        description: Slack channel to send message to
        type: string
        default: $SLACK_DEFAULT_CHANNEL
      text:
        description: Markdown formatted Slack message
        type: string
        default: "Deployment Successful! :tada:"
      slack_mentions_user:
        description: Used for CircleCI @mentions
        type: string
        default: ""
    steps:
      - slack-basic:
          event: << parameters.event >>
          branch_pattern: << parameters.branch_pattern >>
          channel: << parameters.channel >>
          text: << parameters.text >>
          slack_mentions_user: << parameters.slack_mentions_user >>

parameters:
  # Run all workflows for branches that match this regex
  run-all-workflows-branch-regex:
    type: string
    default: /(^main)|(^release.*)$/
  slack_mentions_user:
    type: string
    default: ""

setup: true

orbs:
  continuation: circleci/continuation@0.2.0
  path-filtering: circleci/path-filtering@0.1.1
  slack: circleci/slack@4.9.3

jobs:
  # Generate the CircleCI continue_config.yml from .circleci/src
  generate-config:
    docker:
      - image: cimg/base:2021.04
    steps:
      # The circleci cli exposed in the image doesn't support config packing
      # so we install a version that does
      - run:
          name: Install cli
          command: curl -fLSs https://raw.githubusercontent.com/CircleCI-Public/circleci-cli/master/install.sh | DESTDIR=~/cli bash
      - checkout
      - run:
          name: Generate config
          command: ~/cli config pack .circleci/src > .circleci/continue_config.yml
      - persist_to_workspace:
          root: ./
          paths:
            - .circleci/continue_config.yml

  init:
    working_directory: ~/audius-client
    docker:
      - image: circleci/node:14.18
    steps:
      - checkout

      - create_concatenated_package_lock:
          filename: combined-package-lock.txt

      - restore_cache:
          keys:
            - cache-{{ checksum "package-lock.json" }}-{{ checksum "combined-package-lock.txt" }}

      - run:
          name: Install dependencies
          command: |
            npm i

      - save_cache:
          key: cache-{{ checksum "package-lock.json" }}-{{ checksum "combined-package-lock.txt" }}
          paths:
            - ./node_modules
            - ./packages/web/node_modules
            - ./packages/mobile/node_modules
            - ./packages/stems/node_modules
            - ./packages/common/node_modules

      - save_cache:
          key: cache-{{ .Revision }}
          paths:
            - ./packages/stems/dist
            - ./packages/common/dist

  # Bump version and create release branch
  generate-release:
    working_directory: ~/audius-client
    docker:
      - image: circleci/node:14.18
    steps:
      - checkout
      - add_ssh_keys:
          fingerprints:
            - "a4:99:2e:fa:80:31:dc:23:25:7b:a5:70:3f:08:5f:fa"
      - slack-basic:
          event: always
          branch_pattern: master
          slack_mentions_user: << pipeline.parameters.slack_mentions_user >>
      - run:
          name: Bump version
          command: |
            git config --global user.email "audius-infra@audius.co"
            git config --global user.name "audius-infra"
            PREV_VERSION=$(jq -r .version ./lerna.json)
            CHANGELOG=$(git log --pretty=format:"[%h] %s %an" --date=short v${PREV_VERSION}..HEAD)
            MESSAGE="%s

            ${CHANGELOG}"
            npm i --ignore-scripts
            npx lerna version patch --exact --yes -m "${MESSAGE}"
      - run:
          name: Create release branch
          command: |
            VERSION=$(jq -r .version ./lerna.json)
            git checkout -b release-v${VERSION}
            git push -u origin release-v${VERSION}
      - slack-fail:
          branch_pattern: master
          slack_mentions_user: << pipeline.parameters.slack_mentions_user >>
      - slack-success:
          branch_pattern: master
          slack_mentions_user: << pipeline.parameters.slack_mentions_user >>

workflows:
  setup:
    when:
      not:
        equal: [scheduled_pipeline, << pipeline.trigger_source >>]
    jobs:
      - generate-config
      - init

      # Trigger relevant workflows for the files that have changed
      - path-filtering/filter:
          base-revision: main
          config-path: ../workspace/.circleci/continue_config.yml
          mapping: |
            packages/web/.* run-web-workflow true
            packages/mobile/.* run-mobile-workflow true
            packages/stems/.* run-stems-workflow true
            .circleci/.* run-web-workflow true
            .circleci/.* run-mobile-workflow true
            .circleci/.* run-stems-workflow true
          name: trigger-relevant-workflows
          filters:
            branches:
              ignore: << pipeline.parameters.run-all-workflows-branch-regex >>
          requires:
            - generate-config
            - init
          workspace_path: ../workspace

      # Trigger all workflows for branches that match regex
      - continuation/continue:
          configuration_path: ../workspace/.circleci/continue_config.yml
          name: trigger-all-workflows
          filters:
            branches:
              only: << pipeline.parameters.run-all-workflows-branch-regex >>
          parameters: '{
            "run-web-workflow": true,
            "run-mobile-workflow": true,
            "run-stems-workflow": true
            }'
          pre-steps:
            - attach_workspace:
                at: ../workspace
          requires:
            - generate-config
            - init

  generate-release:
    when:
      and:
        - equal: [scheduled_pipeline, << pipeline.trigger_source >>]
        - equal: ["generate-release", << pipeline.schedule.name >>]
    jobs:
      - generate-release
