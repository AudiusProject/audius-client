version: 2.1
orbs:
  aws-ecr: circleci/aws-ecr@6.0.0

commands:
  pr-comment:
    parameters:
      comment:
        description: The comment to add to the PR
        type: string
      maxComments:
        default: 1
        description: Max nb of comments per PR
        type: integer
      pr:
        default: $CIRCLE_PULL_REQUEST
        description: The PR number or URL
        type: string
    steps:
      - run:
          command: sudo apt-get update && sudo apt-get install -y --force-yes ruby-full
          name: Install Ruby
      - run:
          command: |
            curl -sL https://raw.githubusercontent.com/stephencelis/ghi/master/ghi > ghi
            chmod 755 ghi
            sudo mv ghi /usr/local/bin
          name: Install GHI
      - run:
          command: |
            if [[ -z "${GHI_TOKEN}" ]]; then
              echo "GHI_TOKEN not set"
              /bin/false
            fi
          name: Check Token
      - run:
          command: |
            GH_LOGIN=$(curl -sS https://api.github.com/user\?access_token\=$GHI_TOKEN | jq '.login' --raw-output)
            echo "Authenticated with $GH_LOGIN"
            PR_URL=<< parameters.pr >>
            PR_ID=${PR_URL##*/}
            echo "PR_ID=$PR_ID"
            if [ -z $PR_ID ]; then
              echo "No PR found, skipping"
            else
              if [ $(ghi comment --list $PR_ID | grep -c $GH_LOGIN) -ge << parameters.maxComments >> ]; then
                echo "Already commented, skip"
              else
                ghi comment -m "<< parameters.comment >>"  $PR_ID
              fi
            fi
          name: Send Comment

jobs:
  init:
    working_directory: ~/audius-client
    docker:
      - image: circleci/node:14.18
    steps:
      - checkout

      - run:
          name: update-npm
          command: 'sudo npm install -g npm@latest'

      # Download and cache dependencies
      - restore_cache:
          keys:
            - dependency-cache-{{ checksum "package.json" }}
            # fallback to using the latest cache if no exact match is found
            - dependency-cache-

      - run: rm -rf /home/circleci/audius-client/node_modules/websocket/.git

      - run: echo "//registry.npmjs.org/:_authToken=$NPM_AUTH_TOKEN" > .npmrc

      - run: npm install

      - save_cache:
          key: dependency-cache-{{ checksum "package.json" }}
          paths:
            - ./node_modules

      # Lint
      - run:
          name: lint
          command: npm run lint

      # Run tests
      - run:
          name: test
          command: npm test

      # Persist the build directory to a workspace
      - persist_to_workspace:
          root: ./
          paths:
            - node_modules

  build-demo:
    working_directory: ~/audius-client
    docker:
      - image: circleci/node:14.18
    resource_class: large
    steps:
      - checkout
      - attach_workspace:
          at: ./
      - run:
          name: build-demo
          command: export PUBLIC_URL=/${CIRCLE_BRANCH} && npm run build:demo
      - persist_to_workspace:
          root: ./
          paths:
            - build-demo

  build-staging:
    working_directory: ~/audius-client
    docker:
      - image: circleci/node:14.18
    resource_class: large
    steps:
      - checkout
      - attach_workspace:
          at: ./
      - run:
          name: build-staging
          command: npm run build:stage
      - persist_to_workspace:
          root: ./
          paths:
            - build-staging

  build-mobile-staging:
    working_directory: ~/audius-client
    docker:
      - image: circleci/node:14.18
    resource_class: large
    steps:
      - checkout
      - attach_workspace:
          at: ./
      - run:
          name: build-mobile-staging
          command: npm run build:mobile-stage
      - persist_to_workspace:
          root: ./
          paths:
            - build-mobile-staging

  build-ipfs-staging:
    working_directory: ~/audius-client
    docker:
      - image: circleci/node:14.18
    resource_class: large
    steps:
      - checkout
      - attach_workspace:
          at: ./
      - run:
          name: build-ipfs-staging
          command: npm run build:ipfs-stage
      - run:
          name: zip build-ipfs-staging
          command: zip -r build-ipfs-staging.zip ./build-ipfs-staging
      - persist_to_workspace:
          root: ./
          paths:
            - build-ipfs-staging.zip

  test-staging:
    working_directory: ~/
    docker:
      - image: circleci/node:latest-browsers
    steps:
      - run:
          name: download probers
          command: |
            mkdir -p ~/.ssh && touch ~/.ssh/config && echo $'Host github.com\n\tStrictHostKeyChecking no' > ~/.ssh/config
            git clone git@github.com:AudiusProject/probers.git
            cd probers
      # Download and cache dependencies
      - restore_cache:
          keys:
            - probers-dependency-cache-{{ checksum "probers/package.json" }}
            # fallback to using the latest cache if no exact match is found
            - probers-dependency-cache-
      - run:
          name: install probers dependencies
          command: |
            cd probers
            npm install
      - save_cache:
          key: probers-dependency-cache-{{ checksum "probers/package.json" }}
          paths:
            - ./probers/node_modules
      - attach_workspace:
          at: ./
      - run:
          name: serve and run prober tests
          command: |
            npm install serve
            node node_modules/serve/bin/serve.js -l 3001 -s build-staging &
            cd probers
            npm run test:ci

  build-production:
    working_directory: ~/audius-client
    docker:
      - image: circleci/node:14.18
    resource_class: large
    steps:
      - checkout
      - attach_workspace:
          at: ./
      - run:
          name: build-production
          command: npm run build:prod-source-maps
      - persist_to_workspace:
          root: ./
          paths:
            - build-production

  build-mobile-production:
    working_directory: ~/audius-client
    docker:
      - image: circleci/node:14.18
    resource_class: large
    steps:
      - checkout
      - attach_workspace:
          at: ./
      - run:
          name: build-mobile-production
          command: npm run build:mobile-prod
      - persist_to_workspace:
          root: ./
          paths:
            - build-mobile-production

  build-ipfs-production:
    working_directory: ~/audius-client
    docker:
      - image: circleci/node:14.18
    resource_class: large
    steps:
      - checkout
      - attach_workspace:
          at: ./
      - run:
          name: build-ipfs-production
          command: npm run build:ipfs-prod
      - run:
          name: zip build
          command: zip -r build-ipfs-production.zip ./build-ipfs-production
      - persist_to_workspace:
          root: ./
          paths:
            - build-ipfs-production.zip

  deploy-demo:
    working_directory: ~/audius-client
    docker:
      - image: circleci/python:2.7-jessie
    steps:
      - checkout
      - run:
          name: install-awscli
          command: sudo pip install awscli
      - attach_workspace:
          at: ./
      - run:
          name: Deploy to S3
          command: aws s3 sync build-demo s3://frontend-demo.audius.co/${CIRCLE_BRANCH} --delete --cache-control max-age=0
      - pr-comment:
          comment: Preview this change https://frontend-demo.audius.co/${CIRCLE_BRANCH}

  deploy-staging-s3:
    working_directory: ~/audius-client
    docker:
      - image: circleci/python:2.7-jessie
    steps:
      - checkout
      - run:
          name: install-awscli
          command: sudo pip install awscli
      - attach_workspace:
          at: ./
      - run:
          name: Deploy to S3
          command: |
            aws s3 sync --exclude ./resources/apple-app-site-association --exclude "sitemaps/*" build-staging s3://staging.audius.co --delete --cache-control max-age=0
            aws s3 cp ./resources/apple-app-site-association s3://staging.audius.co --cache-control max-age=0 --content-type 'application/json' --metadata-directive REPLACE

  deploy-staging-cloudflare:
    working_directory: ~/audius-client
    docker:
      - image: circleci/node:14.18
    steps:
      - checkout
      - attach_workspace:
          at: ./
      - run:
          name: update-npm
          command: 'sudo npm install -g npm@latest'
      - run:
          name: install wrangler
          command: 'npm install @cloudflare/wrangler'
      - run:
          name: Deploy to Cloudflare
          command: |
            cd scripts/workers-site
            npm i
            cd ../../
            mv build-staging build
            cp ./resources/apple-app-site-association build
            echo ${GA_ACCESS_TOKEN} | npx wrangler secret put GA_ACCESS_TOKEN --env staging
            npx wrangler publish --env staging

  deploy-mobile-staging:
    working_directory: ~/audius-client
    docker:
      - image: circleci/python:2.7-jessie
    steps:
      - run:
          name: install-awscli
          command: sudo pip install awscli
      - attach_workspace:
          at: ./
      - run:
          name: Deploy to S3
          command: aws s3 sync build-mobile-staging s3://audius-mobile-staging/build --delete

  deploy-ipfs-staging:
    working_directory: ~/audius-client
    docker:
      - image: circleci/python:2.7-jessie
    steps:
      - run:
          name: install-awscli
          command: sudo pip install awscli
      - attach_workspace:
          at: ./
      - run:
          name: Deploy to S3
          command: aws s3 cp build-ipfs-staging.zip s3://audius-site-ipfs/build-ipfs-staging.zip

  update-staging-ga-ipfs-build:
    working_directory: ~/audius-client
    docker:
      - image: circleci/node:14.18
    steps:
      - checkout
      - attach_workspace:
          at: ./
      - run:
          name: update ipfs build in ga
          command: npm run update-ipfs-build:stage
      - persist_to_workspace:
          root: ./
          paths:
            - ./build_cid.txt

  publish-staging-build-cids:
    working_directory: ~/audius-client
    docker:
      - image: circleci/python:2.7-jessie
    steps:
      - run:
          name: install-awscli
          command: sudo pip install awscli
      - attach_workspace:
          at: ./
      - run:
          name: Push to S3
          command: aws s3 cp build_cid.txt s3://audius-site-ipfs/build_cid_staging.txt

  update-ipfs-staging-records:
    working_directory: ~/audius-client
    docker:
      - image: circleci/node:14.18
    steps:
      - attach_workspace:
          at: ./
      - run:
          name: Update Cloudflare records
          command: |
            DNS_NAME=_dnslink.ipfs.staging.audius.co
            CID=$(cat ./build_cid.txt)
            curl -X PUT "https://api.cloudflare.com/client/v4/zones/${CLOUDFLARE_AUDIUS_CO_ZONE}/dns_records/${CLOUDFLARE_STAGE_SITE_IPFS_DNS_ID}" \
              -H "X-Auth-Email: ${CLOUDFLARE_AUTH_EMAIL}" \
              -H "Authorization: Bearer ${CLOUDFLARE_AUTH_KEY}" \
              -H "Content-Type: application/json" \
              --data '{"type":"TXT","name":"'"$DNS_NAME"'","content":"\"dnslink=/ipfs/'"$CID"'\"","ttl":1,"proxied":false}'

  deploy-release-candidate:
    working_directory: ~/audius-client
    docker:
      - image: circleci/node:14.18
    steps:
      - checkout
      - attach_workspace:
          at: ./
      - run:
          name: update-npm
          command: 'sudo npm install -g npm@latest'
      - run:
          name: install wrangler
          command: 'npm install @cloudflare/wrangler'
      - run:
          name: Deploy to Cloudflare
          command: |
            cd scripts/workers-site
            npm i
            cd ../../
            mv build-production build
            cp ./resources/apple-app-site-association build
            cp ./robots.txt build
            echo ${GA_ACCESS_TOKEN} | npx wrangler secret put GA_ACCESS_TOKEN --env release
            npx wrangler publish --env release

  deploy-production-s3:
    working_directory: ~/audius-client
    docker:
      - image: circleci/python:2.7-jessie
    steps:
      - checkout
      - run:
          name: install-awscli
          command: sudo pip install awscli
      - attach_workspace:
          at: ./
      - run:
          name: Deploy to S3
          # Deploy, but exclude sourcemaps
          command: |
            aws s3 sync --exclude "*.map" --exclude ./resources/apple-app-site-association --exclude robots.txt --exclude "sitemaps/*" build-production s3://audius.co --delete --cache-control max-age=604800
            aws s3 cp s3://audius.co/index.html s3://audius.co/index.html --cache-control max-age=0,no-cache,no-store,must-revalidate --content-type text/html --metadata-directive REPLACE --acl public-read
            aws s3 cp ./resources/apple-app-site-association s3://audius.co --cache-control max-age=0 --content-type 'application/json' --metadata-directive REPLACE
            aws s3 cp robots.txt s3://audius.co --cache-control max-age=0 --content-type 'application/json' --metadata-directive REPLACE
      - run:
          name: Invalidate cache
          # Note: cache invalidation is charged per path, so this only counts as 1/1000 monthly quota.
          command: aws cloudfront create-invalidation --distribution-id E1ZJ9Z971FJQJ8 --paths "/*"

  deploy-production-cloudflare:
    working_directory: ~/audius-client
    docker:
      - image: circleci/node:14.18
    steps:
      - checkout
      - attach_workspace:
          at: ./
      - run:
          name: update-npm
          command: 'sudo npm install -g npm@latest'
      - run:
          name: install wrangler
          command: 'npm install @cloudflare/wrangler'
      - run:
          name: Deploy to Cloudflare
          command: |
            cd scripts/workers-site
            npm i
            cd ../../
            mv build-production build
            cp ./resources/apple-app-site-association build
            cp ./robots.txt build
            echo ${GA_ACCESS_TOKEN} | npx wrangler secret put GA_ACCESS_TOKEN --env production
            npx wrangler publish --env production

  deploy-sentry-sourcemaps:
    working_directory: ~/audius-client
    docker:
      - image: circleci/node:14.18
    steps:
      - checkout
      - attach_workspace:
          at: ./
      - run:
          name: update-npm
          command: 'sudo npm install -g npm@latest'
      - run:
          name: install-sentry-cli
          command: npm install @sentry/cli
      - run:
          name: cut-sentry-release
          command: node_modules/.bin/sentry-cli --auth-token ${SENTRY_AUTH_TOKEN} releases --org audius --project audius-client new ${CIRCLE_SHA1}
      - run:
          name: upload-sourcemaps
          command: node_modules/.bin/sentry-cli --auth-token ${SENTRY_AUTH_TOKEN} releases --org audius --project audius-client files ${CIRCLE_SHA1} upload-sourcemaps --no-rewrite build-production
      - run:
          name: finalize-release
          command: node_modules/.bin/sentry-cli --auth-token ${SENTRY_AUTH_TOKEN} releases --org audius --project audius-client finalize ${CIRCLE_SHA1}

  deploy-mobile-production:
    working_directory: ~/audius-client
    docker:
      - image: circleci/python:2.7-jessie
    steps:
      - run:
          name: install-awscli
          command: sudo pip install awscli
      - attach_workspace:
          at: ./
      - run:
          name: Deploy to S3
          command: aws s3 sync build-mobile-production s3://audius-mobile/build --delete

  deploy-ipfs-production:
    working_directory: ~/audius-client
    docker:
      - image: circleci/python:2.7-jessie
    steps:
      - run:
          name: install-awscli
          command: sudo pip install awscli
      - attach_workspace:
          at: ./
      - run:
          name: Deploy to S3
          command: aws s3 cp build-ipfs-production.zip s3://audius-site-ipfs/build-ipfs-production.zip

  update-production-ga-ipfs-build:
    working_directory: ~/audius-client
    docker:
      - image: circleci/node:14.18
    steps:
      - checkout
      - attach_workspace:
          at: ./
      - run:
          name: update ipfs build in ga
          command: npm run update-ipfs-build:prod
      - persist_to_workspace:
          root: ./
          paths:
            - ./build_cid.txt

  publish-production-build-cids:
    working_directory: ~/audius-client
    docker:
      - image: circleci/python:2.7-jessie
    steps:
      - run:
          name: install-awscli
          command: sudo pip install awscli
      - attach_workspace:
          at: ./
      - run:
          name: Push to S3
          command: aws s3 cp build_cid.txt s3://audius-site-ipfs/build_cid_production.txt

  update-ipfs-production-records:
    working_directory: ~/audius-client
    docker:
      - image: circleci/node:14.18
    steps:
      - attach_workspace:
          at: ./
      - run:
          name: Update Cloudflare records
          command: |
            DNS_NAME=_dnslink.ipfs.audius.co
            CID=$(cat ./build_cid.txt)
            curl -X PUT "https://api.cloudflare.com/client/v4/zones/${CLOUDFLARE_AUDIUS_CO_ZONE}/dns_records/${CLOUDFLARE_PROD_SITE_IPFS_DNS_ID}" \
              -H "X-Auth-Email: ${CLOUDFLARE_AUTH_EMAIL}" \
              -H "Authorization: Bearer ${CLOUDFLARE_AUTH_KEY}" \
              -H "Content-Type: application/json" \
              --data '{"type":"TXT","name":"'"$DNS_NAME"'","content":"\"dnslink=/ipfs/'"$CID"'\"","ttl":1,"proxied":false}'

  dist-mac-staging:
    working_directory: ~/audius-client
    macos: # Run on osx so dmg can be created and signed.
      xcode: "12.2.0"
    steps:
      - checkout
      - attach_workspace:
          at: ./

      - run:
          name: distribute
          command: npm run dist:mac-publish

  dist-win-staging:
    working_directory: ~/audius-client
    docker:
      - image: electronuserland/builder:wine-mono
    steps:
      - checkout
      - attach_workspace:
          at: ./

      - run:
          name: distribute
          command: npm run dist:win-publish

  dist-linux-staging:
    working_directory: ~/audius-client
    docker:
      - image: electronuserland/builder
    steps:
      - checkout
      - attach_workspace:
          at: ./

      - run:
          name: distribute
          command: npm run dist:linux-publish

  dist-mac-production:
    working_directory: ~/audius-client
    macos: # Run on osx so dmg can be created and signed.
      xcode: "12.2.0"
    steps:
      - checkout
      - attach_workspace:
          at: ./

      - run:
          name: distribute
          command: npm run dist:mac-publish-production

  dist-win-production:
    working_directory: ~/audius-client
    docker:
      - image: electronuserland/builder:wine-mono
    steps:
      - checkout
      - attach_workspace:
          at: ./

      - run:
          name: distribute
          command: npm run dist:win-publish-production

  dist-linux-production:
    working_directory: ~/audius-client
    docker:
      - image: electronuserland/builder
    steps:
      - checkout
      - attach_workspace:
          at: ./

      - run:
          name: distribute
          command: npm run dist:linux-publish-production

  publish-github-release:
    working_directory: ~/audius-client
    docker:
      - image: cibuilds/github:0.10
    steps:
      - checkout
      - attach_workspace:
          at: ./
      - run:
          name: "Publish Release on GitHub"
          command: |
            VERSION=$(grep -m1 version ./package.json | awk -F: '{ print $2 }' | sed 's/[", ]//g')
            echo "$VERSION"
            ghr -t ${GHI_TOKEN} -u ${CIRCLE_PROJECT_USERNAME} -r ${CIRCLE_PROJECT_REPONAME} -c ${CIRCLE_SHA1} -delete ${VERSION} ./

workflows:
  version: 2
  build-deploy:
    jobs:
      - init

      # Cut a demo if not master
      - build-demo:
          requires:
            - init
          filters:
            branches:
              ignore: /^master$/
      - deploy-demo:
          context: Audius Client
          requires:
            - build-demo
          filters:
            branches:
              ignore: /^master$/

      # Build
      - build-staging:
          requires:
            - init
      - build-production:
          requires:
            - init
          filters:
            branches:
              only: /(^master)|(^hotfix.*)|(^release.*)$/

      - test-staging:
          context: Audius Client
          requires:
            - build-staging

      - deploy-staging-s3:
          context: Audius Client
          requires:
           - build-staging
          filters:
            branches:
              only: /^master$/

      - deploy-staging-cloudflare:
          context: Audius Client
          requires:
           - build-staging
          filters:
            branches:
              only: /^master$/

      - deploy-release-candidate:
          context: Audius Client
          requires:
            - init
            - build-production
          filters:
            branches:
              only: /(^hotfix.*)|(^release.*)$/

      # Allow hotfix to go to staging on command
      - hold-staging:
          type: approval
          requires:
            - init
            - build-staging
          filters:
            branches:
              only: /(^hotfix.*)$/

      - deploy-staging-cloudflare:
          context: Audius Client
          requires:
            - init
            - hold-staging
          filters:
            branches:
              only: /(^hotfix.*)$/

      # Staging Native Mobile
      - build-mobile-staging:
          requires:
            - init
          filters:
            branches:
              only: /^master$/
      - deploy-mobile-staging:
          context: Audius Client
          requires:
            - build-mobile-staging
          filters:
            branches:
              only: /^master$/

      # Staging IPFS build
      - build-ipfs-staging:
          requires:
            - init
          filters:
            branches:
              only: /^master$/
      - deploy-ipfs-staging:
          context: Audius Client
          requires:
            - build-ipfs-staging
          filters:
            branches:
              only: /^master$/
      - hold-update-staging-ga-ipfs-build:
          type: approval
          requires:
            - deploy-ipfs-staging
          filters:
            branches:
              only: /^master$/
      - update-staging-ga-ipfs-build:
          context:
            - Audius Client
            - Pinata
          requires:
            - hold-update-staging-ga-ipfs-build
          filters:
            branches:
              only: /^master$/
      - publish-staging-build-cids:
          context:
            - Audius Client
          requires:
            - update-staging-ga-ipfs-build
          filters:
            branches:
              only: /^master$/
      - hold-update-ipfs-staging-records:
          type: approval
          requires:
            - update-staging-ga-ipfs-build
          filters:
            branches:
              only: /^master$/
      - update-ipfs-staging-records:
          context:
            - Audius Client
            - Cloudflare API
          requires:
            - hold-update-ipfs-staging-records
          filters:
            branches:
              only: /^master$/

      # Native Mobile
      - build-mobile-production:
          requires:
            - init
          filters:
            branches:
              only: /(^release.*)$/
      - deploy-mobile-production:
          context: Audius Client
          requires:
            - build-mobile-production
          filters:
            branches:
              only: /(^release.*)$/

      # Release production web.
      - hold-production:
          type: approval
          requires:
            - build-production
          filters:
            branches:
              only: /(^master)|(^hotfix.*)|(^release.*)$/
      - deploy-production-s3:
          context: Audius Client
          requires:
            - hold-production
          filters:
            branches:
              only: /(^master)|(^hotfix.*)|(^release.*)$/
      - deploy-production-cloudflare:
          context: Audius Client
          requires:
            - hold-production
          filters:
            branches:
              only: /(^master)|(^hotfix.*)|(^release.*)$/

      # Upload sourcemaps
      - deploy-sentry-sourcemaps:
          context: Audius Client
          requires:
            - deploy-production-s3
          filters:
            branches:
              only: /(^master)|(^hotfix.*)|(^release.*)$/

      - publish-github-release:
          context: Audius Client
          requires:
            - hold-production
          filters:
            branches:
              only: /(^master)|(^hotfix.*)|(^release.*)$/

      # Production IPFS build
      - build-ipfs-production:
          requires:
            - init
          filters:
            branches:
              only: /(^release.*)$/
      - deploy-ipfs-production:
          context: Audius Client
          requires:
            - build-ipfs-production
          filters:
            branches:
              only: /(^release.*)$/
      - hold-update-production-ga-ipfs-build:
          type: approval
          requires:
            - deploy-ipfs-production
          filters:
            branches:
              only: /(^release.*)$/
      - update-production-ga-ipfs-build:
          context:
            - Audius Client
            - Pinata
          requires:
            - hold-update-production-ga-ipfs-build
          filters:
            branches:
              only: /(^release.*)$/
      - publish-production-build-cids:
          context:
            - Audius Client
          requires:
            - update-production-ga-ipfs-build
          filters:
            branches:
              only: /(^release.*)$/
      - hold-update-ipfs-production-records:
          type: approval
          requires:
            - update-production-ga-ipfs-build
          filters:
            branches:
              only: /(^release.*)$/
      - update-ipfs-production-records:
          context:
            - Audius Client
            - Cloudflare API
          requires:
            - hold-update-ipfs-production-records
          filters:
            branches:
              only: /(^release.*)$/

      # Distribute staging desktop binaries.
      - hold-dist-mac-staging:
          type: approval
          requires:
            - build-staging
          filters:
            branches:
              only: /(^master)|(^bounce.*)$/
      - dist-mac-staging:
          context: Audius Client
          requires:
            - hold-dist-mac-staging
          filters:
            branches:
              only: /(^master)|(^bounce.*)$/
      - hold-dist-win-staging:
          type: approval
          requires:
            - build-staging
          filters:
            branches:
              only: /(^master)|(^bounce.*)$/
      - dist-win-staging:
          context: Audius Client
          requires:
              - hold-dist-win-staging
          filters:
            branches:
              only: /(^master)|(^bounce.*)$/
      - hold-dist-linux-staging:
          type: approval
          requires:
            - build-staging
          filters:
            branches:
              only: /(^master)|(^bounce.*)$/
      - dist-linux-staging:
          context: Audius Client
          requires:
            - hold-dist-linux-staging
          filters:
            branches:
              only: /(^master)|(^bounce.*)$/

      # Distribute production desktop binaries.
      - hold-dist-mac-production:
          type: approval
          requires:
            - build-production
          filters:
            branches:
              only: /(^master)|(^hotfix.*)|(^release.*)$/
      - dist-mac-production:
          context: Audius Client
          requires:
            - hold-dist-mac-production
          filters:
            branches:
              only: /(^master)|(^hotfix.*)|(^release.*)$/
      - hold-dist-win-production:
          type: approval
          requires:
            - build-production
          filters:
            branches:
              only: /(^master)|(^hotfix.*)|(^release.*)$/
      - dist-win-production:
          context: Audius Client
          requires:
            - hold-dist-win-production
          filters:
            branches:
              only: /(^master)|(^hotfix.*)|(^release.*)$/
      - hold-dist-linux-production:
          type: approval
          requires:
            - build-production
          filters:
            branches:
              only: /(^master)|(^hotfix.*)|(^release.*)$/
      - dist-linux-production:
          context: Audius Client
          requires:
            - hold-dist-linux-production
          filters:
            branches:
              only: /(^master)|(^hotfix.*)|(^release.*)$/
